package measurement

import (
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/oasisprotocol/oasis-core/go/runtime/bundle"
)

func TestMeasureTdxKernelCmdline(t *testing.T) {
	require := require.New(t)

	for _, tc := range []struct {
		cmdline  string
		expected string
	}{
		// Test vector as computed by OVMF.
		{"console=ttyS0 oasis.stage2.roothash=0c3e6c3235d0f04e68b3bac64e6da3766063d13d689cc3dda006e68bd6d61ce1 oasis.stage2.hash_offset=20230144", "cafcc332a983b2e8e8b50aec8398e82a61c36cc4b6fa3a40e18c294611306c06f70facf7ca8a348acd16c787c3751574"},
		// Random cases.
		{"foo bar", "ae062a0d46d7899081d8068d40d5035c134c77f789c7f894c4b5d92297731bbe53b41b7868edb686ba85757a9e12c5bf"},
		{"", "1dd6f7b457ad880d840d41c961283bab688e94e4b59359ea45686581e90feccea3c624b1226113f824f315eb60ae0a7c"},
	} {
		h := measureTdxKernelCmdline(tc.cmdline)
		require.EqualValues(tc.expected, hex.EncodeToString(h))
	}
}

func TestMeasureTdxQemuTdHob(t *testing.T) {
	require := require.New(t)

	for _, tc := range []struct {
		memory   uint64
		expected string
	}{
		// Test vectors as computed by OVMF.
		{512, "00934f9ff0a0f65e41109afb9a7c5a0719f567f32514aeaef4c23c8535793f7064a2c69738a2000500ffae6ba349a153"},
		{640, "62f2fe0fb274f5e0530e5cefd0e547321f19e5989a73711853ddd9e4b3feb1474d6ed46ba4f3a362d01096643665a537"},
		{1024, "1055c9b9a1fc534e688560e2304e18c8597b7261818cf61fb163d40c130547309b750575947a4dcaedbdce4b8d0535f2"},
		{2048, "0b8772e5b0b41b83e6044a68397e02f49fb47066b4fbe4917ea2c45c64f323fdacbb37948f821ebaf8bc9c938ba8a749"},
		{2064, "149c7f16b4a8fd0f45c908eec2cb8bb55b557a0bb7265f5e90055649599511a5d7219b59f8b1c2eca42eb861de19b160"},
		{2560, "e05c12e2a65d57b3ff1f70abd2ae689c7e9096558dc28122befbcecad4a9d6d4569652e5c0298ee381bee5febeecbaa6"},
		{2624, "190cd2f908ac59d9ca2236d69e5e2d8c0b58648229d970331c53c329239f592efa6d437716b6e96f3467bb234c83f37a"},
		{2688, "7386292d589c0cada5ed97b0738e3606eb7fa9920e588d75b68118ec7e4ec7538dd3f6cdf531368d03f0713064b45197"},
		{2815, "51d4fd91da99cc87d6826bd6177fe8c74790b01b6a315d7ca2639d9d1df9e7835a2251b8e69ecef132b6b0302040f25e"},
		{2816, "8eb1a02074362aa0761541cdb4dc3f1788dfeb4538803b241477848e26de294dbe917ab56c5628732679b3abc168c2de"},
		{3072, "798f84285da30f6c295fbb73e3c093cf13164b6ad9d547a123b8d4d305f87a027caaba88e4cfd684ed7b424f37811a2e"},
		{4096, "5b684faf8d02a733945f821d9cdd170802e72103977acf66949c9382500283adc90cbec57f8e7653f8bee1cab83689de"},
		{5120, "757f23ac59db87c10d7d01cd92792f9dde979862da0b750ff22e2b61a1cd7e3456f55a41d3e3bcb52ee2007e59b8b0a1"},
		{8192, "2e070cda358b5aa00f27cca25c47381bb564f4be3a84d059805a73cbbde764ed8341f7e09915b5e7b370f9c08a743fbd"},
		{16384, "cd2312a0d87ef3c4a928df87088969a80b33d7bf3fc584bdde637b09ed808a8d821a56b78a13a6eb506db7578444abbe"},
	} {
		h := measureTdxQemuTdHob(&bundle.TDXResources{
			Memory: tc.memory,
		}, nil)
		require.EqualValues(tc.expected, hex.EncodeToString(h))
	}
}

func TestMeasureTdxQemuAcpiTables(t *testing.T) {
	require := require.New(t)

	for _, tc := range []struct {
		memory         uint64
		cpus           uint8
		expectedTables string
		expectedRsdp   string
		expectedLdr    string
	}{
		// Test vectors as computed by OVMF.
		{
			512,
			1,
			"41693a04e4aa7122b8fdab1ff9a84da6c7652143e3a2a1f4215847b9144d1d524498da73378c6222f7f67fd2f3a3fd16",
			"6bc203b3843388cc4918459c3f5c6d1300a796fb594781b7ecfaa3ae7456975f095bfcc1156c9f2d25e8b8bc1b520f66",
			"68cd79315e70aecd4afe7c1b23a5ed7b3b8e51a477e1739f111b3156def86bbc56ebf239dcd4591bc7a9fff90023f481",
		},
		{
			1024,
			1,
			"444cf35d277a7b6049faf4ff23165e256e716eaad4650aeef6afae8e2dca3359b40c1b2eb997c5568f956616310c9147",
			"6bc203b3843388cc4918459c3f5c6d1300a796fb594781b7ecfaa3ae7456975f095bfcc1156c9f2d25e8b8bc1b520f66",
			"68cd79315e70aecd4afe7c1b23a5ed7b3b8e51a477e1739f111b3156def86bbc56ebf239dcd4591bc7a9fff90023f481",
		},
		{
			2815,
			1,
			"a7ced2dba0b7c273b8f6ea58dfaebf0663cd4dff2fe821e4a5019fa1bc96f02d5616b4fd5c473cbce1651f88b640146f",
			"6bc203b3843388cc4918459c3f5c6d1300a796fb594781b7ecfaa3ae7456975f095bfcc1156c9f2d25e8b8bc1b520f66",
			"68cd79315e70aecd4afe7c1b23a5ed7b3b8e51a477e1739f111b3156def86bbc56ebf239dcd4591bc7a9fff90023f481",
		},
		{
			2816,
			1,
			"ec9e8622a100c399d71062a945f95d8e4cdb7294e8b1c6d17a6a8d37b5084444000a78b007ef533f290243421256d25c",
			"6bc203b3843388cc4918459c3f5c6d1300a796fb594781b7ecfaa3ae7456975f095bfcc1156c9f2d25e8b8bc1b520f66",
			"68cd79315e70aecd4afe7c1b23a5ed7b3b8e51a477e1739f111b3156def86bbc56ebf239dcd4591bc7a9fff90023f481",
		},
		{
			4096,
			1,
			"ec9e8622a100c399d71062a945f95d8e4cdb7294e8b1c6d17a6a8d37b5084444000a78b007ef533f290243421256d25c",
			"6bc203b3843388cc4918459c3f5c6d1300a796fb594781b7ecfaa3ae7456975f095bfcc1156c9f2d25e8b8bc1b520f66",
			"68cd79315e70aecd4afe7c1b23a5ed7b3b8e51a477e1739f111b3156def86bbc56ebf239dcd4591bc7a9fff90023f481",
		},
		{
			512,
			2,
			"cdb3d087ca49ce2f2d7766c65e9339143338c695a9464613283a70a92b33303f9f307b68a52cde9785bfe88479e9a8c8",
			"07d867a2ead8d8e3b1240f17e461089b819ab63ac34eff3b29459445c67409c2342dfdc9335d2335a5aaf591fe1483e1",
			"142aa9710a7187d649bfafab0a4226e554859c7fb0cd3e6707f31291e332e399b4ae8f851876ef0af8e607a59b60cc8e",
		},
		{
			512,
			3,
			"6d9cb00314243db1a262e90a0545bea7115ca1d82ae89fda4160d589d0fd92c7d7623c68c2a9597b0b49056fe3b3f70c",
			"51eff3f0ca69faed4be2ba2c6ed7b61f907e0e49093258349b57d2f3b7bd362f97ba18576e63aeabfeddf97f669c4bab",
			"ce0c680ed51b2b7ac74245a137b010513cdca6bf5aa70a0d9071347d46de74b248e40a29c2c6fa471fec97dced8f6521",
		},
		{
			512,
			4,
			"bae1cd6e26a2b2a664ee8e772733e17a96b11fd4523b7e9f306271c71154846137dc41ca40ad4fac5e18ef74448cd97a",
			"ec17b1450b73240d0f84fb23a2f4a23156a69eda7cd7d3948128428f5eb20c2b90601fdbebf8fa4b4732e2068afdabb2",
			"b67c3317cba069817536b83b280c55c76c3923368b2e645a78e415c0d1cefca6659c5f7ed42b1a3483f88baa5ee2517e",
		},
		{
			512,
			5,
			"e1193b5f8c15df9d8a65c9189a335f277f2da71508aa913cbb244a708d80211a1d5dab0f1afca1a14616b5a194a4940b",
			"1051c59faa7391f804233b8c82fba400718a2121bf7073a730ec0b2f5513685004018260c307b0cecf8dfbcd58184c10",
			"21bcbe97262ffaa98e20adc5270427d67d5fba035b1f959d8c9d827ea2be76424d082d0ea731a413998279589ffc7667",
		},
		{
			512,
			6,
			"6f0ff1979f6d3997c3e0257d1af61f398e82e317efa59c798e190c8456abce0b899710fc7f66e3373e43bf97bcc7081e",
			"87783d09d5ab1c0bf57fda92d859d6b41e9f6fb6e12861e25012b486b76b69194e83abeee571291fc0a567cd7b4ddb18",
			"8ede7c7903777583dcbea16129c3bae0aa9526358d3a321a47db0b167b77fa4d72e72811adf63d9893a58076678b29e8",
		},
		{
			512,
			7,
			"d8e36b767ff604a62f002f5cb19706cb03acf983eb40d2b7050aac84a9da71ed80da485e05dceab441da560d89fe77e1",
			"7801fce9e584079bd817d8c1a1bf80f9ac0c0cb49954f9585a0f80126eac60997c57340ae0227b4db30883d449a564db",
			"d97cbb795eb3b8ff557b516e3eaa0e2c020d394df1fa854d665dd97cbbde76af153ee767a76f8819fdb0d8cf34975de7",
		},
		{
			512,
			8,
			"2f8b5da1cc48ec9cd9b8eb8540c40928925d6630475297e89862e17ea1aff69588aa96248d59ded333d47a453538f725",
			"fc05bb3b112197edbebfcf1d4d623e801f79b8272be108af37ed61c35038d34832b155acb4484af8ea00258315d172e6",
			"7df84690602ad12853b8f4f75c3a7cf69055c084e55deeda326fb94a01863152f6fd59439e96208dab6f57040f53ec56",
		},
		{
			512,
			9,
			"cc6011c7455f9094b20b86fa43e1ca33b5e03c81bcf879fbabf80595a60c086b3a03acc06f24219195062ce54e837def",
			"f4e843f28da5622620d61b5a168d611d8d10cc80af760a5609dd3d404eb96930b9fd76f399f80a3c62eded30003fb3a4",
			"df1e62d2b7ec38bb2c73a107499eee44c3778dd2c10f0e4bcfa652c68ddf03eda838f0a14b29c9cd0b8cebaa6c9fe359",
		},
		{
			512,
			10,
			"4e49b2bac15100788030067be78a57afbe9b442a910b79d90b2616b2a241507ce49069711252e0f23d48838053992795",
			"4759ea2dddeed39eada92ebb72d242f5dda341e94e4f4960cd9338a886d6d1ef9a68ef70bc11aa88c6a28b544f24c9a7",
			"6a6fa24febbbe26a3146cc4e7bd9bbe9da07c39167f97f083ae00825ecdc14155d791e874bd556d876ad475ef6e936a8",
		},
		{
			512,
			11,
			"8073b20f3134b4a122a6bb191c91e94bd400c2d6af1c6a01bb0f947cd07c46ee2a2542d220a6cf622b42891ef7c03dc7",
			"f4446961cce189d3f606dd48af54a9c7baaf481c13f28043055027ef5bde06bc25bb0ffe2bee0fb2f69e7541704b2908",
			"422fa3a56e3e82a5c15a8257d629fe64437c0f7e5757972b3be15587e8738ced8b3e1c873c51811def333663dda0f78e",
		},
		{
			512,
			12,
			"9e1eb60dbe05ab4d5b592498d2a94f9a28a030c002161e3a8b6fdc1473ada25148244d8078dccbfa9c25fc65e7c1dbbd",
			"3032bb2379ecb0c94fbed80e8d39109ac44ee1a0deb057fb7e2f998968ca60fd2ecff419bbf76e284decf26eb729e183",
			"cb2aab723db4f83fd3e5582ade0b56c602bf691ec541d3f47b884015732d28c8b119b2fb944c23d90d2d143c34c3a1fb",
		},
		{
			512,
			13,
			"ac4b40a640b6e37cd9d0b762a15ef7e71ce063121d686ca90027754811e99f8a23db9f962d74f42d6aa0824c542c14db",
			"13fa3722535187b3cec36ae31b1e517b3c54c6f0410967246aeab14940cf79448e651901de9f43b607052880dca20823",
			"cb5bc77844cfda88826c92a89628a5ad621f5414b1c192f8bbeaef40e2e1f9e782ffd527c172d1ed86db46348e4b2a4e",
		},
		{
			512,
			14,
			"72835b3d73ee11781420c546bffe95186e5accf71de84d19905279b4ff01f947eca9236df714a0847147a73a71a3bb07",
			"a670231098daedb46e93563c1e6261fdb0b5e4c37770972b18479cfd1cfeae40fabe4d0f4e5c44704d22df36d92e289c",
			"0eeb8c61117613c2e1e45e6fab5a8db2f9e3653d4102e4c5c76522fd5aeff3ccf47666c4fc3a4d8a5279921fe382da83",
		},
		{
			512,
			15,
			"66a057f23e706bba2319d5a5262245c719d6ae99bd8e6a95e07abad7e59400af9c03b7c4dc5ea9561cd859b584bcbc91",
			"7927690af5b51ba9cb4b91d1301d9b12e1031a68a1469a3e50d6e911db0020bbbf7431ac390bf58ccbeb60711c0aa9a2",
			"3ad1dae95a67d33fc0371b496206cbcf6c6b57dba607e02e33e03a8f8ab4ca8894d8ec112d8b1d4a2d92c1fd363ef725",
		},
		{
			512,
			16,
			"f03ff322a1067aedbf55de0c6be9bac387c74df935389096082ba42edb2f88eba81540b5b97059923448067c787bf626",
			"62bcbe7b3446b99af8daedaf33bda7631620d09b442d6f91495f0dc6e393c834b5a408cf43711a7b8efd8c438db83fe7",
			"f871fdfcbf08609c01efd099949c6d5b3c7c556db710f11a37e1d4c2c787ef65faad1b66ecdb5d55a2cf4d84049ab5b9",
		},
	} {
		hTables, hRsdp, hLdr, err := measureTdxQemuAcpiTables(&bundle.TDXResources{
			Memory:   tc.memory,
			CPUCount: tc.cpus,
		})
		require.NoError(err, "memory: %d cpus: %d", tc.memory, tc.cpus)
		require.EqualValues(tc.expectedTables, hex.EncodeToString(hTables))
		require.EqualValues(tc.expectedRsdp, hex.EncodeToString(hRsdp))
		require.EqualValues(tc.expectedLdr, hex.EncodeToString(hLdr))
	}
}

func TestMeasureLog(t *testing.T) {
	require := require.New(t)

	for _, tc := range []struct {
		expected string
		log      []string
	}{
		// Test vectors as computed by OVMF.
		{
			"04d1279ff61eaa5ee548d1a3b02933efcb59d8d16f6f11eb31dc573261b1bdb5a9817a306f7509dbb4b3f6979ded7192",
			[]string{
				"98a24811a887cc59e301bff5a3c11f118ebabbace224826e5c1365c2762f24e29c08fb03fc215ce42f9e11f7804c22f0",
			},
		},
		{
			"bfad4b857a0ee57662ef1094ad68fb2411b445bc7a471f0e40a68e283206d43e9283d8d65c0dacf9fb8def007f5d2ffd",
			[]string{
				"5afc9992e9dda3885baf2ee3dca8de0f3e8def2dbd508f25eb41b820216b996f96ebdb0411c5b43f09e8248965a85e62",
				"77a0dab2312b4e1e57a84d865a21e5b2ee8d677a21012ada819d0a98988078d3d740f6346bfe0abaa938ca20439a8d71",
				"214b0bef1379756011344877743fdc2a5382bac6e70362d624ccf3f654407c1b4badf7d8f9295dd3dabdef65b27677e0",
				"0a2e01c85deae718a530ad8c6d20a84009babe6c8989269e950d8cf440c6e997695e64d455c4174a652cd080f6230b74",
			},
		},
		{
			"84efb9756c002ee0aff43b0fa71223bdad6b43b3aa112c93c5bf89f3466e69f35b2d4acef407c8a0a692a20eff9a5177",
			[]string{
				"51d4fd91da99cc87d6826bd6177fe8c74790b01b6a315d7ca2639d9d1df9e7835a2251b8e69ecef132b6b0302040f25e",
				"344bc51c980ba621aaa00da3ed7436f7d6e549197dfe699515dfa2c6583d95e6412af21c097d473155875ffd561d6790",
				"9dc3a1f80bcec915391dcda5ffbb15e7419f77eab462bbf72b42166fb70d50325e37b36f93537a863769bcf9bedae6fb",
				"6f2e3cbc14f9def86980f5f66fd85e99d63e69a73014ed8a5633ce56eca5b64b692108c56110e22acadcef58c3250f1b",
				"d607c0efb41c0d757d69bca0615c3a9ac0b1db06c557d992e906c6b7dee40e0e031640c7bfd7bcd35844ef9edeadc6f9",
				"08a74f8963b337acb6c93682f934496373679dd26af1089cb4eaf0c30cf260a12e814856385ab8843e56a9acea19e127",
				"18cc6e01f0c6ea99aa23f8a280423e94ad81d96d0aeb5180504fc0f7a40cb3619dd39bd6a95ec1680a86ed6ab0f9828d",
				"394341b7182cd227c5c6b07ef8000cdfd86136c4292b8e576573ad7ed9ae41019f5818b4b971c9effc60e1ad9f1289f0",
				"68cd79315e70aecd4afe7c1b23a5ed7b3b8e51a477e1739f111b3156def86bbc56ebf239dcd4591bc7a9fff90023f481",
				"6bc203b3843388cc4918459c3f5c6d1300a796fb594781b7ecfaa3ae7456975f095bfcc1156c9f2d25e8b8bc1b520f66",
				"a7ced2dba0b7c273b8f6ea58dfaebf0663cd4dff2fe821e4a5019fa1bc96f02d5616b4fd5c473cbce1651f88b640146f",
				"1dd6f7b457ad880d840d41c961283bab688e94e4b59359ea45686581e90feccea3c624b1226113f824f315eb60ae0a7c",
				"23ada07f5261f12f34a0bd8e46760962d6b4d576a416f1fea1c64bc656b1d28eacf7047ae6e967c58fd2a98bfa74c298",
				"394341b7182cd227c5c6b07ef8000cdfd86136c4292b8e576573ad7ed9ae41019f5818b4b971c9effc60e1ad9f1289f0",
			},
		},
	} {
		log := make([][]byte, 0, len(tc.log))
		for _, entryHex := range tc.log {
			entry, err := hex.DecodeString(entryHex)
			require.NoError(err)
			log = append(log, entry)
		}

		h := measureLog(log)
		require.EqualValues(tc.expected, hex.EncodeToString(h))
	}
}
